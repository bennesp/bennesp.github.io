[{"content":" ℹ️ Every snippet that uses a file can be onelined using cat, like: cat \u0026lt;\u0026lt; EOF | ldapcommand ldif file content here EOF  Commands In the snippets below we use some arguments. Here are the arguments per-tool, explained:\nldapadd, ldapmodify, ldapsearch  -D \u0026quot;cn=admin,dc=example,dc=org\u0026quot; is the username, called \u0026ldquo;Binding DN\u0026rdquo; -w admin is the password -f filename.ldif specify which LDIF file to use to add/modify/search  ldapsearch only  -b \u0026quot;dc=example,dc=org\u0026quot; is the base address where to start the search  Snippets Create a new user 1 2 3 4 5 6 7 8 9 10 11 12 13  # file.ldif # mandatory: dn: cn=billy,dc=example,dc=org cn: billy objectClass: inetOrgPerson sn: Jones # sn=Surname userPassword: billy # userPassword can be hashed with slappasswd, see next snippet # userPassword: {SSHA}g1RqOK2kk/nV241xD2BZRdxdVuRqGNnG # optionally: uid: 123 givenName: Billy \u0026amp; Mandy mail: billy@example.org   ldapadd -D \u0026#34;cn=admin,dc=example,dc=org\u0026#34; -w admin -f file.ldif Generate hashed password slappasswd -g # generates random non hashed password slappasswd # hashes password with default hash (like SSHA = Salted SHA) slappasswd -h \u0026#39;{CRYPT}\u0026#39; # generates hashed password with CRYPT hash algorithm # oneline: PASSWORD=$(slappasswd -g) \u0026amp;\u0026amp; echo $PASSWORD \u0026amp;\u0026amp; slappasswd -s \u0026#34;$PASSWORD\u0026#34; Export all the readable objects ldapsearch -D \u0026#34;cn=admin,dc=example,dc=org\u0026#34; -w admin -b \u0026#34;dc=example,dc=org\u0026#34; Allow every authenticated user to read the directory  dn is the selector of the database (you could have hdb instead of mdb if your LDAP is older) olcAccess  {1} is the priority between all the other rules (can be negative, rules are applied from the smallest number to the higher one) to * is the resource to which the rule applies, could be to dn.base=\u0026quot;dc=example,dc=org\u0026quot; or similar, see docs for more info by anonymous auth allows every un-authenticated user to authenticate by users read allows every authenticated user to read the object specified in the to clause    # config.ldif dn: olcDatabase={1}mdb,cn=config changetype: modify add: olcAccess olcAccess: {1}to * by anonymous auth by users read ldapmodify -D \u0026#34;cn=admin,cn=config\u0026#34; -w config -f config.ldif ","permalink":"https://bennesp.github.io/posts/ldap-snippets/","summary":"Useful snippet for managing LDAP from CLI","title":"LDAP Snippets"},{"content":"Snippets If you search only snippets, go to Snippets.\nWhy LDAP If you need to use LDAP, I\u0026rsquo;m really sorry, it simply sucks.\nIt is a very old idea with many limitations, but sadly still widely used.\nIf you search in Google Images or similar for \u0026ldquo;LDAP\u0026rdquo; you will only find interfaces that reminds me of Windows 95, like the following:\n A very old and ugly interface that I don\u0026rsquo;t want to see in my life\n  But as I previously said, it is just used a lot, so sooner or later we will have to face it.\nWhat is LDAP LDAP is a protocol to organize data in a hierarchical structure. Often these data are \u0026ldquo;users\u0026rdquo; and \u0026ldquo;organizations\u0026rdquo; of a company.\nAn implementation of ldap is openldap, and a convenient container image of openldap is osixia/openldap.\nHow LDAP Basic setup LDAP Server setup The simplest setup, using docker:\ndocker run --rm -ti -p 389:389 osixia/openldap:1.5.0 or using docker-compose:\nservices: ldap: image: osixia/openldap:1.5.0 ports: - \u0026#34;389:389\u0026#34; You can now play with it using a tool to manage the LDAP server.\nLDAP Client setup There are a lot of tools, but the only usable and not old style one that I found is jxplorer. It is written in Java so it is pretty portable. It has two \u0026ldquo;modes\u0026rdquo;: \u0026ldquo;HTML View\u0026rdquo; and \u0026ldquo;Table Editor\u0026rdquo;. \u0026ldquo;HTML View\u0026rdquo; is terrible, so I always use the \u0026ldquo;Table Editor\u0026rdquo;.\nIt looks like this:\n Jxplorer\n  You will want to login to the LDAP server. The \u0026ldquo;login\u0026rdquo; process in LDAP is called \u0026ldquo;binding\u0026rdquo; process. So you need to \u0026ldquo;bind\u0026rdquo; to the server.\nThe default credentials that the container image provides are currently:\nUser DN: cn=admin,dc=example,dc=com Password: admin  Login window\n  If they differ, refer to the documentation of the image on github.\ncn? dc? ou? In LDAP we refer to an object in a tree with its full \u0026ldquo;path\u0026rdquo;.\nSo cn=admin,dc=example,dc=org means \u0026ldquo;the object called cn=admin, inside the object called dc=example, which is inside the object called dc=org\u0026rdquo;\nWhy cn and dc?\nBecause objects are just a bunch of properties, and thus we need to define a property that identify the object. Why not using the same property for every object? Who knows.\nAnyway:\n dc (domain component) is used for directories cn (common name) is used for leaf nodes like users ou (organizational unit) is used for \u0026hellip;yes, organizational unit  It is just convention.\nThis is an example of structure (with the first three nodes compressed):\n Example of structure\n  How to add an object? Since an object is just a bunch of properties inside a directory, we need to understand two things to add an object:\n What is the \u0026ldquo;path\u0026rdquo; of the object? What are the properties of the object?  Let\u0026rsquo;s suppose we want to create a top-level organizational unit, for example we want to add the organizational unitfor the \u0026ldquo;Quality\u0026rdquo; department of our company that is called example.org.\nWe will create the object:\n Inside dc=example,dc=org, so that it will be ou=Quality,dc=example,dc=org With the properties that an organizational unit should have  Properties are defined in groups by \u0026ldquo;objectClasses\u0026rdquo;. Each object class has a name and a collection of properties.\nIf we try to create a new node, and search inside the available object classes, we can find the organizationalUnit:\n objectClasses\n  Adding it and submitting the final object, will lead to a new object in the directory structure\n Quality organizational unit added\n  CLI ftw\u0026hellip; or wtf Personally I really like UIs since they make it easier to understand what is going on, but when automation is needed, the CLI is the obvious best option.\nBut, as I previously told, LDAP is old AF. So CLI is terrible.\nThese are some tools (pre-installed on osx):\nldapadd ldapdelete ldapmodify ldappasswd ldapurl ldapcompare ldapexop ldapmodrdn ldapsearch ldapwhoami slapacl slapauth slapconfig slapindex slapschema slapadd slapcat slapdn slappasswd slaptest Yes, they are a lot, but the most useful are ldapadd and ldapsearch\n","permalink":"https://bennesp.github.io/posts/ldap-setup/","summary":"Why, what and how LDAP","title":"LDAP Setup"}]